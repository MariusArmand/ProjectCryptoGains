<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ProjectCryptoGains">

    <!-- Scrollbar Style -->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border"
                Margin="1"
                CornerRadius="2"
                BorderThickness="1" 
                Background="#333333" 
                BorderBrush="#444444">
                        <Path x:Name="Arrow"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}">
                            <Path.Fill>
                                <SolidColorBrush Color="#FF9900"/>
                            </Path.Fill>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#2D2D30"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="#666666"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="2" 
                Background="#444444" 
                BorderBrush="#333333" 
                BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" 
            CornerRadius="2" 
            Background="#1E1E1E" 
            BorderBrush="#444444" 
            BorderThickness="1"/>

            <RepeatButton Grid.Row="0" 
                  Style="{StaticResource ScrollBarLineButton}"
                  Height="18"
                  Command="{x:Static ScrollBar.LineUpCommand}"
                  Content="M 0 4 L 8 4 L 4 0 Z"/>

            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0"/>
                </Track.Thumb>
            </Track>

            <RepeatButton Grid.Row="2" 
                  Style="{StaticResource ScrollBarLineButton}"
                  Height="18"
                  Command="{x:Static ScrollBar.LineDownCommand}"
                  Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3"
            CornerRadius="2"
            Background="#1E1E1E"
            BorderBrush="#444444"
            BorderThickness="1"/>

            <RepeatButton Grid.Column="0" 
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="{x:Static ScrollBar.LineLeftCommand}"
                  Content="M 4 0 L 4 8 L 0 4 Z"/>

            <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1"/>
                </Track.Thumb>
            </Track>

            <RepeatButton Grid.Column="2" 
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="{x:Static ScrollBar.LineRightCommand}"
                  Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="#444444"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="10"/>
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="10"/>
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Button Styles -->
    <!-- Default Button Style -->
    <Style TargetType="Button">
        <!-- Set dark background with white text for better visibility -->
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="1">
                        <!-- Center content within the button -->
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Change background color when mouse hovers over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FF9900"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Square Button Style with extra padding -->
    <Style x:Key="SquareButtonStyle" TargetType="Button">
        <!-- Similar to default but with added padding for better touch interaction -->
        <Setter Property="Background" Value="#1E1E1E"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="1"
                        Padding="0">
                        <!-- Added padding for larger clickable area -->
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"
                                          SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#4D4D4D"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CheckBox Style -->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <!-- Custom CheckBox Box -->
                        <Border x:Name="CheckBoxBorder"
                            Width="16" Height="16"
                            CornerRadius="3"
                            Background="#1E1E1E"
                            BorderBrush="#444444"
                            BorderThickness="1"
                            Margin="0,0,5,0">
                            <Grid>
                                <!-- Checkmark -->
                                <Path x:Name="CheckMark"
                                  Visibility="Collapsed"
                                  Stroke="#FF9900"
                                  StrokeThickness="2"
                                  Data="M2,8 L6,12 L14,2"/>
                            </Grid>
                        </Border>

                        <!-- CheckBox Label -->
                        <ContentPresenter VerticalAlignment="Center"/>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <!-- Checked -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <!-- Hover Effect -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="#666666"/>
                        </Trigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#666666"/>
                            <Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="#333333"/>
                            <Setter TargetName="CheckMark" Property="Stroke" Value="#666666"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Text Styles -->
    <!-- TextBlock Style -->
    <Style TargetType="TextBlock">
        <!-- Uniform white text for all TextBlocks -->
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <!-- Text Input Styles -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="#1E1E1E"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="0"
                        Padding="4,1">
                        <Decorator x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#666666"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF9900"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomTextBoxStyle_Scroll" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="#1E1E1E"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Border" 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        CornerRadius="2">
                        <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                  VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                  Focusable="false"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#666666"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#666666"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF9900"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Style -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" 
            Grid.ColumnSpan="2"
            CornerRadius="0"
            Background="#1E1E1E"
            BorderBrush="#444444"
            BorderThickness="1" />
            <Border Grid.Column="0"
            CornerRadius="0" 
            Margin="1" 
            Background="#1E1E1E"
            BorderBrush="#444444"
            BorderThickness="0,0,1,0" />
            <Path x:Name="Arrow"
            Grid.Column="1"     
            Fill="#FF9900"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="#666666"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="#1E1E1E" />
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                        Name="ToggleButton" 
                        Template="{StaticResource ComboBoxToggleButton}" 
                        Grid.Column="2" 
                        Focusable="false"
                        IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                        ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" 
                                    IsHitTestVisible="False"  
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    Margin="3,3,23,3"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="#1E1E1E"
                            Foreground="White"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                        Name="Popup"
                        Placement="Bottom"
                        IsOpen="{TemplateBinding IsDropDownOpen}"
                        AllowsTransparency="True" 
                        Focusable="False"
                        PopupAnimation="Slide">
                            <Grid Name="DropDown"
                            SnapsToDevicePixels="True"                
                            MinWidth="{TemplateBinding ActualWidth}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="#2B2B2B"
                                BorderThickness="1"
                                BorderBrush="#888888"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                        Padding="2"
                        SnapsToDevicePixels="true"
                        Background="#2B2B2B">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#3C3C3C"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Separator Style -->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="#444444"/>
    </Style>

    <!-- Menu Styles -->
    <!-- Custom style for the entire Menu control -->
    <Style x:Key="CustomMenuStyle" TargetType="{x:Type Menu}">
        <!-- Dark theme for menu with white text -->
        <Setter Property="Background" Value="#2B2B2B"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <!-- Style for each MenuItem within the Menu -->
                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="Background" Value="#2B2B2B"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Padding" Value="10,5"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type MenuItem}">
                                <Border Name="Border" 
                                    Background="{TemplateBinding Background}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Margin="10,0,0,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Margin="3,3,6,3" ContentSource="Header" RecognizesAccessKey="True"/>
                                        <!-- Popup for submenu items -->
                                        <Popup Name="Popup" 
                                           Placement="Bottom" 
                                           IsOpen="{TemplateBinding IsSubmenuOpen}" 
                                           AllowsTransparency="True" 
                                           Focusable="False" 
                                           PopupAnimation="None">
                                            <Border Background="{TemplateBinding Background}" 
                                                BorderBrush="{TemplateBinding BorderBrush}" 
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                Padding="0,0,0,5">
                                                <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                    <ItemsPresenter/>
                                                </ScrollViewer>
                                            </Border>
                                        </Popup>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <!-- Trigger to change background when item is highlighted -->
                                    <Trigger Property="IsHighlighted" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="#3C3C3C"/>
                                    </Trigger>
                                    <!-- Trigger to change text color when item is disabled -->
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="#666666"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom style for individual MenuItems, providing additional customization -->
    <Style x:Key="CustomMenuItemStyle" TargetType="{x:Type MenuItem}">
        <!-- Dark background with white text, additional padding for better visual spacing -->
        <Setter Property="Background" Value="#2B2B2B"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <!-- Adding more padding to the Border for better visual spacing -->
                    <Border Name="Border" 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Padding="30,3,20,3">
                        <!-- Adjusted padding for more space on sides -->
                        <Grid>
                            <ContentPresenter Margin="3,3,6,3" ContentSource="Header" RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Change background when mouse over for better user feedback -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#3C3C3C"/>
                        </Trigger>
                        <!-- Dim text when item is disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#666666"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Datagrid Style -->
    <!-- Datagrid TextBox Style-->
    <Style TargetType="TextBox" x:Key="CustomDataGridEditingTextBoxStyle">
        <Setter Property="Background" Value="#888888" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="CaretBrush" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="-4,-3,-4,-3"/>
        <Setter Property="Padding" Value="4,3,4,3"/>
    </Style>
    
    <Style TargetType="DataGrid">
        <!-- Make the border and grid lines a little less imposing -->
        <Setter Property="Background" Value="#1E1E1E"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#444444" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#444444" />
        <Setter Property="VerticalGridLinesBrush" Value="#444444" />
        <!-- Show only column headers -->
        <Setter Property="HeadersVisibility" Value="Column"/>

        <!-- Row background colors for regular and alternating rows -->
        <Setter Property="RowBackground" Value="#252526"/>
        <Setter Property="AlternatingRowBackground" Value="#2D2D30"/>

        <!-- Define row and header dimensions -->
        <Setter Property="RowHeight" Value="25"/>
        <Setter Property="ColumnHeaderHeight" Value="30"/>

        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <!-- Changes background and text color when a row is selected -->
                            <Setter Property="Background" Value="#3C3C3C"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <!-- Style for individual column headers with padding -->
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Background" Value="#2B2B2B"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="BorderBrush" Value="#444444"/>
                    <Setter Property="BorderThickness" Value="0,0,0,1"/>
                    <Setter Property="Padding" Value="10,0,10,0"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Style.Triggers>
                        <!-- Highlight selected rows -->
                        <Trigger Property="IsSelected" Value="True">
                            <!-- Makes background transparent to show row color, no border for selection highlight -->
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <!-- Similar to selected but with a different border color for focus indication -->
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="BorderBrush" Value="#FF9900" />
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEditing" Value="True">
                            <!-- Adds a border when cell is in editing mode -->
                            <Setter Property="BorderBrush" Value="#FF9900" />
                            <Setter Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </Style.Triggers>
                    <!-- Add some padding around the contents of a cell -->
                    <Setter Property="Padding" Value="4,3,4,3" />
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="DataGridCell">
                                <Border Padding="{TemplateBinding Padding}" 
                                   BorderBrush="{TemplateBinding BorderBrush}"
                                   BorderThickness="{TemplateBinding BorderThickness}"
                                   Background="{TemplateBinding Background}">
                                    <ContentPresenter />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style TargetType="Control">
                                <!-- Removes dotted style border -->
                                <Setter Property="BorderBrush" Value="Transparent" />
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>